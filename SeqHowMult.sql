-- Using existing objects as series

SELECT TOP 1000
   Seq = ROW_NUMBER () OVER ( ORDER BY NAME )
FROM sys.objects

SELECT TOP 1000
   Seq = ROW_NUMBER () OVER ( ORDER BY t1.NAME )
FROM sys.objects t1
CROSS JOIN sys.objects t2

-- Procedurally as table function

IF OBJECT_ID('dbo.SeqF', 'TF') IS NOT NULL DROP FUNCTION dbo.SeqF; 
GO

CREATE FUNCTION SeqF (@From Int, @To Int)
RETURNS @RetSeq TABLE (Seq INT) 
AS
BEGIN
	DECLARE @i INT = 1
	WHILE @i <= 1000
	BEGIN
		INSERT INTO @RetSeq ( Seq) VALUES ( @i )
		SET @i = @i + 1
	END
	RETURN
END
GO

SELECT TOP 1000 Seq FROM SeqF(1,1000) ORDER BY Seq
GO

-- Combining digits as table fucntion

IF OBJECT_ID('dbo.SeqF', 'TF') IS NOT NULL DROP FUNCTION dbo.SeqF; 
GO

CREATE FUNCTION SeqF (@From Int, @To Int)
RETURNS @RetSeq TABLE (Seq INT) 
AS
BEGIN
	INSERT INTO @RetSeq
	SELECT * 
	FROM 
	(	SELECT  
			Seq = t3.i * 1000 + t2.i * 100 + t1.i * 10 + t0.i  
		FROM
		(SELECT 0 i UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) t0,
		(SELECT 0 i UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) t1,
		(SELECT 0 i UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) t2,
		(SELECT 0 i UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) t3
	) vt01
	WHERE vt01.Seq BETWEEN @From AND @To
	RETURN
END
GO

SELECT TOP 1000 Seq FROM SeqF(1,1000) ORDER BY Seq
GO

--SELECT COUNT(*) FROM sys.objects
--SELECT TOP 100 * FROM sys.objects
